data = training,
method = "LogitBoost",
trControl= fitControl,
#tuneGrid = grid_LB,
tuneLength = TuneLength)
ELT <- toc()
sink("./Console output.txt",append = TRUE)
print(paste(ELT$msg,(ELT$toc - ELT$tic), "sec elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/60, "min elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/3600, "hours elapsed"))
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
sink()
LB
summary(LB)
LB$finalModel
LB$results
LB$bestTune
#ROC and AUC
x <- evalm(LB)
x$roc
ggsave(paste("ROC curve of ",LB$modelInfo$label,".png"),
path = "./figs/ROC Curves")
x$stdres
y<- as.data.frame(x$stdres)
auc_LB <- y[13,1]
auc_LB
#Variables' Importance
VarImp_LB <- varImp(LB, scale=TRUE)
VarImp_LB
CM <- plot(VarImp_NB,
main = paste("Variables' Importance in", LB$modelInfo$label),
type = "b", cex=1.3,top = N)
CM
png(filename = paste("./figs/Variables' Importance/",LB$modelInfo$label,".png"),
width = 490, height = 580, units = "px", pointsize = 15)
CM
dev.off()
#prediction
prediction_LB  <- predict(LB,testing)
prediction_LB
#Confusion matrix
confusion_matrix_LB <- confusionMatrix(prediction_LB,
testing$Y,
positive = "Positive")
confusion_matrix_LB
draw_CM(confusion_matrix_LB,paste("Confusion Matrix in", LB$modelInfo$label))
png(filename = paste("./figs/Confusion Matrices/", LB$modelInfo$label,".png"),
width = 900, height = 900, units = "px", pointsize = 25)
draw_CM(confusion_matrix_LB,paste("Confusion Matrix in", LB$modelInfo$label))
dev.off()
###### Random Forest
library(randomForest)
grid_RF <-  expand.grid(mtry = c(10:20,32,38,41,51,60) )
#setup trainControl
tic("rf")
RF <- train(Y ~ .,
data = training,
method = "rf",
trControl= fitControl,
#tuneGrid = grid_RF,
tuneLength = TuneLength)
ELT <- toc()
sink("./Console output.txt",append = TRUE)
print(paste(ELT$msg,(ELT$toc - ELT$tic), "sec elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/60, "min elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/3600, "hours elapsed"))
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
sink()
RF
summary(RF)
RF$finalModel
RF$results
RF$bestTune
#ROC and AUC
x <- evalm(RF)
x$roc
ggsave(paste("ROC curve of ",RF$modelInfo$label,".png"),
path = "./figs/ROC Curves")
x$stdres
y<- as.data.frame(x$stdres)
auc_RF <- y[13,1]
auc_RF
#Variables' Importance
VarImp_RF <- varImp(RF, scale=TRUE)
VarImp_RF
CM <- plot(VarImp_NB,
main = paste("Variables' Importance in", RF$modelInfo$label),
type = "b", cex=1.3,top = N)
CM
png(filename = paste("./figs/Variables' Importance/",RF$modelInfo$label,".png"),
width = 490, height = 580, units = "px", pointsize = 15)
CM
dev.off()
#prediction
prediction_RF  <- predict(RF,testing)
prediction_RF
#Confusion matrix
confusion_matrix_RF <- confusionMatrix(prediction_RF,
testing$Y,
positive = "Positive")
confusion_matrix_RF
draw_CM(confusion_matrix_RF,paste("Confusion Matrix in", RF$modelInfo$label))
png(filename = paste("./figs/Confusion Matrices/", RF$modelInfo$label,".png"),
width = 900, height = 900, units = "px", pointsize = 25)
draw_CM(confusion_matrix_RF,paste("Confusion Matrix in", RF$modelInfo$label))
dev.off()
############################# Models Resampling ####################################
################################################################################
resamps <- resamples(list(NaiveBayes = NB,
svmLinear = SVMLK,
svmRadial = SVMRK,
svmPoly = SVMPL,
nnet = NN,
rpart = DT,
knn = KNN,
logistic = LB,
randomForest = RF))
resamps$timings
Timings <- data.frame(Models = rownames(resamps$timings),
Time = resamps$timings[,1])
resamps <- data.frame(Models = c("NaiveBayes",
"svmLinear",
"svmRadial",
"svmPoly",
"nnet",
"rpart",
"knn",
"logistic",
"randomForest"),
Accuracy = c(confusion_matrix_NB$overall[1],
confusion_matrix_SVMLK$overall[1],
confusion_matrix_SVMRK$overall[1],
confusion_matrix_SVMPL$overall[1],
confusion_matrix_NN$overall[1],
confusion_matrix_DT$overall[1],
confusion_matrix_KNN$overall[1],
confusion_matrix_LB$overall[1],
confusion_matrix_RF$overall[1]),
Kappa = c(confusion_matrix_NB$overall[2],
confusion_matrix_SVMLK$overall[2],
confusion_matrix_SVMRK$overall[2],
confusion_matrix_SVMPL$overall[2],
confusion_matrix_NN$overall[2],
confusion_matrix_DT$overall[2],
confusion_matrix_KNN$overall[2],
confusion_matrix_LB$overall[2],
confusion_matrix_RF$overall[2]),
Sensitivity = c(confusion_matrix_NB$byClass[1],
confusion_matrix_SVMLK$byClass[1],
confusion_matrix_SVMRK$byClass[1],
confusion_matrix_SVMPL$byClass[1],
confusion_matrix_NN$byClass[1],
confusion_matrix_DT$byClass[1],
confusion_matrix_KNN$byClass[1],
confusion_matrix_LB$byClass[1],
confusion_matrix_RF$byClass[1]),
Specificity = c(confusion_matrix_NB$byClass[2],
confusion_matrix_SVMLK$byClass[2],
confusion_matrix_SVMRK$byClass[2],
confusion_matrix_SVMPL$byClass[2],
confusion_matrix_NN$byClass[2],
confusion_matrix_DT$byClass[2],
confusion_matrix_KNN$byClass[2],
confusion_matrix_LB$byClass[2],
confusion_matrix_RF$byClass[2]),
Precision = c(confusion_matrix_NB$byClass[5],
confusion_matrix_SVMLK$byClass[5],
confusion_matrix_SVMRK$byClass[5],
confusion_matrix_SVMPL$byClass[5],
confusion_matrix_NN$byClass[5],
confusion_matrix_DT$byClass[5],
confusion_matrix_KNN$byClass[5],
confusion_matrix_LB$byClass[5],
confusion_matrix_RF$byClass[5]),
F1 = c(confusion_matrix_NB$byClass[7],
confusion_matrix_SVMLK$byClass[7],
confusion_matrix_SVMRK$byClass[7],
confusion_matrix_SVMPL$byClass[7],
confusion_matrix_NN$byClass[7],
confusion_matrix_DT$byClass[7],
confusion_matrix_KNN$byClass[7],
confusion_matrix_LB$byClass[7],
confusion_matrix_RF$byClass[7]),
AUC = c(auc_NB,
auc_SVMLK,
auc_SVMRK,
auc_SVMPL,
auc_NN,
auc_DT,
auc_NN,
auc_LB,
auc_RF))
#Export Results in a .xlsx file
library(writexl)
write_xlsx(resamps,".\\Models' results.xlsx")
############################### Model's Perfomances Plots ######################
################################################################################
#Plot accuracy
ggplot(data=resamps,
aes(x=Models, y=Accuracy, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(Accuracy*100,digits =3),"%")),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Accuracy")+
ylab("")
ggsave("Accuracy.png",
path = "./figs/Models' Performances")
#Plot Kappa
ggplot(data=resamps,
aes(x=Models, y=Kappa, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(Kappa,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Kappa")+
ylab("")
ggsave("Kappa.png",
path = "./figs/Models' Performances")
#Plot Sensitivity
ggplot(data=resamps,
aes(x=Models, y=Sensitivity, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(Sensitivity,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Sensitivity")+
ylab("")
ggsave("Sensitivity.png",
path = "./figs/Models' Performances")
#Plot Specificity
ggplot(data=resamps,
aes(x=Models, y=Specificity, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(Specificity,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Specificity")+
ylab("")
ggsave("Specificity.png",
path = "./figs/Models' Performances")
#Plot Precision
ggplot(data=resamps,
aes(x=Models, y=Precision, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(Precision,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Precision")+
ylab("")
ggsave("Precision.png",
path = "./figs/Models' Performances")
#Plot F1
ggplot(data=resamps,
aes(x=Models, y=F1, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(F1,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' F1")+
ylab("")
ggsave("F1.png",
path = "./figs/Models' Performances")
#Plot AUC
ggplot(data=resamps,
aes(x=Models, y=AUC, fill=Models)) +
geom_bar(stat="identity", position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(AUC,digits =3))),
vjust = 0.5,
hjust = 1.8,
color="black",
position = position_dodge(0.9),
size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_bw()+
coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' AUC")+
ylab("")
ggsave("AUC.png",
path = "./figs/Models' Performances")
############################### Models' Time Elapsed Plots #####################
################################################################################
Custom_Palette <- c("#E64B35B2","#4DBBD5B2","#00A087B2","#3C5488B2",
"#F39B7FB2","#8491B4B2","#91D1C2B2","#DC0000B2"
,"#7E6148B2")
Timings$prop <- Timings$Time/sum(Timings$Time) #percentages
#Plot Time elapsed (%)
ggplot(data=Timings,
aes(x=Models, y=prop, fill=Models)) +
geom_bar(stat="identity",
position=position_dodge(),
color = "black")+
geom_text(aes(label=paste(round(prop,digits =4)*100,"%")),
vjust = -0.3,
hjust = 0.5,
color="black",
position = position_dodge(0.8),
size=3.5)+
scale_fill_manual(values = Custom_Palette)+
theme_bw()+
#coord_flip()+
theme(legend.position = "none")+
ggtitle("Models' Time Elapsed")+
ylab("")
ggsave("Time Elapsed.png",
path = "./")
######################### Script Exectution time ###############################
################################################################################
ELT <- toc()
sink("./Console output.txt",append = TRUE)
print(paste(ELT$msg,(ELT$toc - ELT$tic), "sec elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/60, "min elapsed"))
print(paste(ELT$msg,(ELT$toc - ELT$tic)/3600, "hours elapsed"))
sink()
#Export Models' performances on an output .txt file
sink("./Console output.txt",append = TRUE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## Naive Bayes","#################",
"##############################################"))
confusion_matrix_NB$table
confusion_matrix_NB$overall
confusion_matrix_NB$byClass
NB$bestTune
NB$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## SVM Linear Kernel","#################",
"####################################################"))
confusion_matrix_SVMLK$table
confusion_matrix_SVMLK$overall
confusion_matrix_SVMLK$byClass
SVMLK$bestTune
SVMLK$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## SVM Radial Kernel","#################",
"####################################################"))
confusion_matrix_SVMRK$table
confusion_matrix_SVMRK$overall
confusion_matrix_SVMRK$byClass
SVMRK$bestTune
SVMRK$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## SVM Polynomial Kernel","#################",
"########################################################"))
confusion_matrix_SVMPL$table
confusion_matrix_SVMPL$overall
confusion_matrix_SVMPL$byClass
SVMPL$bestTune
SVMPL$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## Neural Network","#################",
"#################################################"))
confusion_matrix_NN$table
confusion_matrix_NN$overall
confusion_matrix_NN$byClass
NN$bestTune
NN$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## Decision Tree","#################",
"################################################"))
confusion_matrix_DT$table
confusion_matrix_DT$overall
confusion_matrix_DT$byClass
DT$bestTune
DT$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## K- Nearest Neighbors","#################",
"#######################################################"))
confusion_matrix_KNN$table
confusion_matrix_KNN$overall
confusion_matrix_KNN$byClass
KNN$bestTune
KNN$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## Boosted Logistic Regression","#################",
"##############################################################"))
confusion_matrix_LB$table
confusion_matrix_LB$overall
confusion_matrix_LB$byClass
LB$bestTune
LB$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print(paste("############## Random Forest","#################",
"##############################################################"))
confusion_matrix_RF$table
confusion_matrix_RF$overall
confusion_matrix_RF$byClass
RF$bestTune
RF$results
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
print_empty_line(html.output = FALSE)
sink()
